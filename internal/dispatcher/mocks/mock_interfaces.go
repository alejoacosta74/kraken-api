// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alejoacosta74/kraken-api/internal/kafka (interfaces: ProducerPool)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducerPool is a mock of ProducerPool interface.
type MockProducerPool struct {
	ctrl     *gomock.Controller
	recorder *MockProducerPoolMockRecorder
}

// MockProducerPoolMockRecorder is the mock recorder for MockProducerPool.
type MockProducerPoolMockRecorder struct {
	mock *MockProducerPool
}

// NewMockProducerPool creates a new mock instance.
func NewMockProducerPool(ctrl *gomock.Controller) *MockProducerPool {
	mock := &MockProducerPool{ctrl: ctrl}
	mock.recorder = &MockProducerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerPool) EXPECT() *MockProducerPoolMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockProducerPool) Send(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerPoolMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducerPool)(nil).Send), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockProducerPool) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProducerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProducerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockProducerPool) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockProducerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProducerPool)(nil).Stop))
}
