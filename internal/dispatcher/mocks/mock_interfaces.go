// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alejoacosta74/kraken-api/internal/kafka (interfaces: ProducerPool)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducerPool is a mock of ProducerPool interface.
type MockProducerPool struct {
	ctrl     *gomock.Controller
	recorder *MockProducerPoolMockRecorder
}

// MockProducerPoolMockRecorder is the mock recorder for MockProducerPool.
type MockProducerPoolMockRecorder struct {
	mock *MockProducerPool
}

// NewMockProducerPool creates a new mock instance.
func NewMockProducerPool(ctrl *gomock.Controller) *MockProducerPool {
	mock := &MockProducerPool{ctrl: ctrl}
	mock.recorder = &MockProducerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerPool) EXPECT() *MockProducerPoolMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockProducerPool) SendMessage(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockProducerPoolMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockProducerPool)(nil).SendMessage), arg0, arg1)
}

// Start mocks base method.
func (m *MockProducerPool) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockProducerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProducerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockProducerPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProducerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProducerPool)(nil).Stop))
}
