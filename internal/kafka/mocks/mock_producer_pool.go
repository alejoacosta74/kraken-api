// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/alejoacosta74/kraken-api/internal/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageSender) Send(ctx context.Context, topic string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessageSenderMockRecorder) Send(ctx, topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageSender)(nil).Send), ctx, topic, msg)
}

// MockPoolController is a mock of PoolController interface.
type MockPoolController struct {
	ctrl     *gomock.Controller
	recorder *MockPoolControllerMockRecorder
}

// MockPoolControllerMockRecorder is the mock recorder for MockPoolController.
type MockPoolControllerMockRecorder struct {
	mock *MockPoolController
}

// NewMockPoolController creates a new mock instance.
func NewMockPoolController(ctrl *gomock.Controller) *MockPoolController {
	mock := &MockPoolController{ctrl: ctrl}
	mock.recorder = &MockPoolControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolController) EXPECT() *MockPoolControllerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPoolController) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPoolControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPoolController)(nil).Start))
}

// Stop mocks base method.
func (m *MockPoolController) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPoolControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPoolController)(nil).Stop))
}

// MockProducerPool is a mock of ProducerPool interface.
type MockProducerPool struct {
	ctrl     *gomock.Controller
	recorder *MockProducerPoolMockRecorder
}

// MockProducerPoolMockRecorder is the mock recorder for MockProducerPool.
type MockProducerPoolMockRecorder struct {
	mock *MockProducerPool
}

// NewMockProducerPool creates a new mock instance.
func NewMockProducerPool(ctrl *gomock.Controller) *MockProducerPool {
	mock := &MockProducerPool{ctrl: ctrl}
	mock.recorder = &MockProducerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerPool) EXPECT() *MockProducerPoolMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockProducerPool) Send(ctx context.Context, topic string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerPoolMockRecorder) Send(ctx, topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducerPool)(nil).Send), ctx, topic, msg)
}

// Start mocks base method.
func (m *MockProducerPool) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProducerPoolMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProducerPool)(nil).Start))
}

// Stop mocks base method.
func (m *MockProducerPool) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockProducerPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProducerPool)(nil).Stop))
}

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockKafkaProducer) Send(ctx context.Context, msg kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockKafkaProducerMockRecorder) Send(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockKafkaProducer)(nil).Send), ctx, msg)
}
